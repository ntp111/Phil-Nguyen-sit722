name: Production - Deploy (main)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }} # e.g., s224005289week10acr.azurecr.io
  AKS_CLUSTER_NAME: s224005289week10aks
  AKS_RESOURCE_GROUP: sit722
  PROD_NS: production
  TAG: prod-${{ github.sha }}

jobs:
  deploy-production:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ env.AKS_RESOURCE_GROUP }}" \
            --name "${{ env.AKS_CLUSTER_NAME }}" \
            --overwrite-existing

      # Ensure cluster can pull from ACR (idempotent)
      - name: Attach ACR to AKS
        shell: bash
        run: |
          REG_NAME="${ACR_LOGIN_SERVER%%.azurecr.io}"
          if [[ -z "$REG_NAME" || "$REG_NAME" == "$ACR_LOGIN_SERVER" ]]; then
            echo "ERROR: ACR_LOGIN_SERVER must look like <name>.azurecr.io (got: $ACR_LOGIN_SERVER)"
            exit 1
          fi
          az aks update \
            --name "${{ env.AKS_CLUSTER_NAME }}" \
            --resource-group "${{ env.AKS_RESOURCE_GROUP }}" \
            --attach-acr "$REG_NAME"

      - name: Ensure production namespace exists
        run: |
          kubectl get ns "${{ env.PROD_NS }}" >/dev/null 2>&1 || kubectl create namespace "${{ env.PROD_NS }}"

      - name: Deploy infra (ConfigMaps, Secrets, Databases, RabbitMQ)
        run: |
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/configmaps.yaml
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/secrets.yaml
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/product-db.yaml
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/order-db.yaml
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/rabbitmq.yaml

      - name: Deploy services (Product, Customer, Order, Frontend)
        run: |
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/product-service.yaml
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/customer-service.yaml
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/order-service.yaml
          kubectl -n "${{ env.PROD_NS }}" apply -f k8s/frontend.yaml

      - name: Point deployments at prod images
        run: |
          kubectl -n "${{ env.PROD_NS }}" set image deploy/product-service '*=${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.TAG }}'
          kubectl -n "${{ env.PROD_NS }}" set image deploy/customer-service '*=${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.TAG }}'
          kubectl -n "${{ env.PROD_NS }}" set image deploy/order-service '*=${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.TAG }}'
          kubectl -n "${{ env.PROD_NS }}" set image deploy/frontend '*=${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.TAG }}'

      - name: Rollout status
        run: |
          kubectl -n "${{ env.PROD_NS }}" rollout status deploy/product-service --timeout=180s
          kubectl -n "${{ env.PROD_NS }}" rollout status deploy/customer-service --timeout=180s
          kubectl -n "${{ env.PROD_NS }}" rollout status deploy/order-service --timeout=180s
          kubectl -n "${{ env.PROD_NS }}" rollout status deploy/frontend --timeout=180s

      - name: Azure Logout
        if: always()
        run: az logout

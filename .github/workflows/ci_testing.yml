name: CI - Test, Build & Push (testing)
 
on:
  workflow_dispatch:
  push:
    branches: [ testing ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'

concurrency:
  group: ci-testing-${{ github.ref }}
  cancel-in-progress: true

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  # --- Run backend tests against service Postgres containers ---
  test_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # --- customer_service ---
      - name: Install test deps (customer_service)
        working-directory: backend/customer_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run tests (customer_service)
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5434/customers
        run: pytest --maxfail=1 --disable-warnings -q

      # --- product_service ---
      - name: Install test deps (product_service)
        working-directory: backend/product_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run tests (product_service)
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/products
        run: pytest --maxfail=1 --disable-warnings -q

      # --- order_service ---
      - name: Install test deps (order_service)
        working-directory: backend/order_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run tests (order_service)
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5433/orders
        run: pytest --maxfail=1 --disable-warnings -q

  # --- Build & Push images (only if tests pass) ---
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login (Service Principal JSON in secret)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # az acr login expects the REGISTRY NAME (strip ".azurecr.io")
      - name: Login to Azure Container Registry
        shell: bash
        run: |
          REG_NAME="${ACR_LOGIN_SERVER%%.azurecr.io}"
          if [[ -z "$REG_NAME" || "$REG_NAME" == "$ACR_LOGIN_SERVER" ]]; then
            echo "ERROR: ACR_LOGIN_SERVER must look like <name>.azurecr.io (got: $ACR_LOGIN_SERVER)"
            exit 1
          fi
          az acr login --name "$REG_NAME"

      - name: Install latest Docker Scout
        run: curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh

      # --- Build & Push: customer_service ---
      - name: Build Customer Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service/
      - name: Docker Scout CVEs (Customer) – fail on critical
        run: |
          docker scout cves local://${{ env.ACR_LOGIN_SERVER }}/customer_service:latest \
            --only-severity critical --exit-code
      - name: Push Customer Service Image
        run: docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest

      # --- Build & Push: product_service ---
      - name: Build Product Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
      - name: Docker Scout CVEs (Product) – fail on critical
        run: |
          docker scout cves local://${{ env.ACR_LOGIN_SERVER }}/product_service:latest \
            --only-severity critical --exit-code
      - name: Push Product Service Image
        run: docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

      # --- Build & Push: order_service ---
      - name: Build Order Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
      - name: Docker Scout CVEs (Order) – fail on critical
        run: |
          docker scout cves local://${{ env.ACR_LOGIN_SERVER }}/order_service:latest \
            --only-severity critical --exit-code
      - name: Push Order Service Image
        run: docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

      # --- Build & Push: frontend ---
      - name: Build Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
      - name: Docker Scout CVEs (Frontend) – fail on critical
        run: |
          docker scout cves local://${{ env.ACR_LOGIN_SERVER }}/frontend:latest \
            --only-severity critical --exit-code
      - name: Push Frontend Image
        run: docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Azure Logout
        if: always()
        run: az logout
